#!/usr/bin/env python3

import os
import json
import argparse
import boto3
from urllib.parse import quote

# Ensure the following environment variables are set:
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN (if you're using temporary credentials)

# Don't forget to install boto3
# pip install boto3

# Initialize the S3 client
s3 = boto3.client("s3")


def get_s3_files(bucket_name: str):
    """Returns a set of file names currently in the S3 bucket."""
    s3_files = set()
    result = s3.list_objects(Bucket=bucket_name)
    for content in result.get("Contents", []):
        s3_files.add(content["Key"])
    return s3_files


def upload_to_s3(directory: str, bucket_name: str):
    """Uploads all files from directory to the specified S3 bucket."""

    # Get a list of all local files not starting with "." and not equal to "update_json"
    local_files = set(
        file_name
        for file_name in os.listdir(directory)
        if not file_name.startswith(".")
        and file_name != "update_json"
        and file_name != "roms.md"
        and file_name != "create_roms_markdown"
    )

    # Get a list of all files currently in the S3 bucket
    s3_files = get_s3_files(bucket_name)

    # Files in local but not in S3 are new files that need to be uploaded.
    to_upload = local_files - s3_files
    for file_name in to_upload:
        file_path = os.path.join(directory, file_name)
        with open(file_path, "rb") as file_data:
            s3.upload_fileobj(file_data, bucket_name, file_name)
        print(f"Uploaded {file_name} to S3 bucket {bucket_name}")

    # Files in S3 but not in local are deleted files that need to be removed from S3.
    to_delete = s3_files - local_files
    for file_name in to_delete:
        s3.delete_object(Bucket=bucket_name, Key=file_name)
        print(f"Deleted {file_name} from S3 bucket {bucket_name}")


def update_roms(directory: str, base_url: str):
    """Updates roms.json with new files and their URLs."""
    # Allowed file extensions
    allowed_extensions = [".img", ".bin", ".stc", ".rom"]

    # If roms.json exists, load it. Otherwise, create an empty list.
    roms_data = []
    json_path = os.path.join(directory, "roms.json")

    if "roms.json" in os.listdir(directory):
        with open(json_path, "r", encoding="utf-8") as f:
            roms_data = json.load(f)

    current_files = [rom["url"].split("/")[-1].lower() for rom in roms_data]

    # Loop through each file in the directory, excluding roms.json
    for file_name in os.listdir(directory):
        file_base_name, file_ext = os.path.splitext(file_name)

        if (
            file_name != "roms.json"
            and quote(file_name).lower() not in current_files
            and file_ext.lower() in allowed_extensions
        ):
            file_size_kb = int(
                os.path.getsize(os.path.join(directory, file_name)) / 1024
            )
            # Construct the URL
            url = os.path.join(base_url, quote(file_name))
            roms_data.append(
                {
                    "url": url,
                    "name": file_base_name,  # Use the base name (without the extension) for the name field
                    "description": "",
                    "tags": [],
                    "size_kb": file_size_kb,
                }
            )

    # Save the updated data back to roms.json
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(roms_data, f, indent=4)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Update roms.json with new files and their URLs."
    )
    parser.add_argument(
        "--path",
        type=str,
        default=os.getcwd(),
        help="Path to the directory you want to process.",
    )
    parser.add_argument(
        "--url",
        type=str,
        default="",
        help="Base URL to use for constructing file URLs.",
    )
    parser.add_argument(
        "--s3-upload",
        action="store_true",
        help="Set this flag if you want to upload to the S3 bucket.",
    )

    args = parser.parse_args()
    update_roms(args.path, args.url)

    # If the --s3-upload flag is set, upload the files to S3.
    if args.s3_upload:
        upload_to_s3(args.path, "roms.sidecart.xyz")
